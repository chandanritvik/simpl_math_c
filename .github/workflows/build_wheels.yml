name: Build Wheels

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: '3.x'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel build

    - name: Build wheels
      run: |
        python -m build --wheel --outdir dist/

    - name: Install test dependencies
      run: |
        python -m pip install pytest requests

    - name: Test wheels
      run: |
        cd dist
        wheel_file=$(ls *.whl)
        python -m pip install $wheel_file
        cd ..
        python -m pytest tests/ -v

    - name: Store artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist/*.whl
        if-no-files-found: error

  publish:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        for d in dist/wheels-*/; do
          cp $d/*.whl dist/
        done
        twine upload dist/*.whl