name: Build Wheels

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"  # Python versions to build for
  CIBW_SKIP: "*-musllinux*"  # Skip musllinux builds
  CIBW_ARCHS_MACOS: "x86_64 arm64"  # Build for both Intel and M1 Macs
  CIBW_BEFORE_BUILD_LINUX: >
    pip install --upgrade pip &&
    yum install -y openssl-devel || 
    (apt-get update && apt-get install -y libssl-dev)
  CIBW_ENVIRONMENT_WINDOWS: "OPENSSL_ROOT_DIR='C:/Program Files/OpenSSL-Win64'"
  CIBW_ENVIRONMENT_MACOS: "LDFLAGS='-L/usr/local/opt/openssl@3/lib' CPPFLAGS='-I/usr/local/opt/openssl@3/include'"

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install system dependencies for OpenSSL
      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev

      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "LDFLAGS=-L/usr/local/opt/openssl@3/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/usr/local/opt/openssl@3/include" >> $GITHUB_ENV

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install openssl

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.16.2

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install build
        run: python -m pip install build

      - name: Build SDist
        run: python -m build --sdist

      - name: Upload SDist
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Move wheels to dist directory
        run: |
          mkdir -p dist/all
          find dist -type f -name "*.whl" -exec mv {} dist/all/ \;
          find dist -type f -name "*.tar.gz" -exec mv {} dist/all/ \;

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/all/