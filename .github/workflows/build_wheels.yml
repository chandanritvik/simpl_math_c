name: Build Wheels
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
  CIBW_ARCHS_MACOS: "x86_64 arm64"
  CIBW_ENVIRONMENT_WINDOWS: >-
    OPENSSL_ROOT_DIR='C:/Program Files/OpenSSL-Win64'
    INCLUDE='C:/Program Files/OpenSSL-Win64/include;%INCLUDE%'
    LIB='C:/Program Files/OpenSSL-Win64/lib;%LIB%'
  CIBW_ENVIRONMENT_MACOS: >-
    CC=clang
    CXX=clang++
    CFLAGS='-Wno-error=implicit-function-declaration -I/usr/local/opt/openssl@3/include'
    LDFLAGS='-L/usr/local/opt/openssl@3/lib'
    ARCHFLAGS='-arch x86_64'
    OPENSSL_ROOT_DIR='/usr/local/opt/openssl@3'
  CIBW_BUILD_VERBOSITY: 3
  
jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3 || echo "OpenSSL already installed"
          brew link openssl@3 --force || echo "OpenSSL link already exists"
          export OPENSSL_ROOT_DIR="/usr/local/opt/openssl@3"
          echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@3" >> $GITHUB_ENV
          echo "CFLAGS=-Wno-error=implicit-function-declaration -I/usr/local/opt/openssl@3/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L/usr/local/opt/openssl@3/lib" >> $GITHUB_ENV
          echo "ARCHFLAGS=-arch x86_64" >> $GITHUB_ENV

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install openssl --force || echo "OpenSSL installation may have failed"
          if exist "C:/Program Files/OpenSSL-Win64" (
            echo "OpenSSL installed successfully"
          ) else (
            echo "OpenSSL installation failed"
            exit 1
          )

          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.16.2 setuptools wheel
          
      - name: Debug Info (macOS)
        if: runner.os == 'macOS'
        run: |
          if [ -d /usr/local/opt/openssl@3 ]; then
            ls -la /usr/local/opt/openssl@3/lib || echo "No lib directory found"
            ls -la /usr/local/opt/openssl@3/include || echo "No include directory found"
          else
            echo "OpenSSL@3 is not installed properly"
            exit 1
          fi
          brew list openssl@3 || echo "OpenSSL not properly installed"

          
      - name: Build wheels
        run: |
          python -m cibuildwheel --print-build-identifiers
          python -m cibuildwheel --output-dir wheelhouse || (
            echo "Error: Wheel build failed"
            exit 1
          )
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ENVIRONMENT_WINDOWS: >
            OPENSSL_ROOT_DIR='C:/Program Files/OpenSSL-Win64'
            INCLUDE='C:/Program Files/OpenSSL-Win64/include;%INCLUDE%'
            LIB='C:/Program Files/OpenSSL-Win64/lib;%LIB%'

      - name: Debug Info (Windows)
        if: failure() && runner.os == 'Windows'
        run: |
          echo "Environment Variables:"
          set
          echo "OpenSSL Directory Contents:"
          dir "C:/Program Files/OpenSSL-Win64"
          echo "Python and Pip Information:"
          python --version
          python -m pip --version
          python -m pip list


      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Build SDist
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          python -m build --sdist
      - name: Upload SDist
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    needs: [build_wheels, build_sdist]
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist
      - name: Move wheels to dist directory
        run: |
          mkdir -p dist/all
          find dist -type f -name "*.whl" -exec mv {} dist/all/ \;
          find dist -type f -name "*.tar.gz" -exec mv {} dist/all/ \;
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/all/